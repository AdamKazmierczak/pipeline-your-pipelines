parameters:
  os: ''
  os_tag: ''
  toolchain: ''
  toolchain_version: ''
  repo_docker_path: 'src/agents/docker'
  image_name_prefix: 'azure-pipelines-agent'
  docker_registry: 'giuliovprodemo.azurecr.io'
  docker_registry_connection: 'mydemo.azurecr.io'

jobs:
- job: 'deploy_${{ parameters.os }}'
  pool:
    name: MakeAgents
    demands:
    - 'agent.os -equals ${{ coalesce( parameters.os_tag, parameters.os ) }}'
  variables:
    docker_image_id: '${{ parameters.docker_registry }}/${{ parameters.image_name_prefix }}/${{ parameters.os }}/${{ parameters.toolchain }}:${{ parameters.toolchain_version }}'
    container_name: '${{ parameters.toolchain }}-${{ parameters.toolchain_version }}'
  steps:
  - script: echo PAT = $(AZURE_DEVOPS_PAT). Env var = %AZURE_DEVOPS_PAT%
    condition: eq(variables['agent.os'], 'Windows_NT')
  - script: echo PAT = $(AZURE_DEVOPS_PAT). Env var = $AZURE_DEVOPS_PAT
    condition: in(variables['agent.os'], 'Darwin', 'Linux')  
  - powershell: |
      $ContainerName = "$(container_name)"
      $res = docker ps --format "{{.ID}}" --filter "name=$ContainerName"
      $value = if ($res -eq $null) { "false" } else { "true" }
      Write-Host "ContainerIsRunning=$value"
      Write-Output "##vso[task.setvariable variable=ContainerIsRunning;]$value"
    displayName: 'Check if container $(container_name) is running'
  - task: Docker@2
    displayName: 'Stop running container $(container_name)'
    inputs:
      command: rm
      arguments: '--force $(container_name)'
    condition: and(succeeded(), eq(variables['ContainerIsRunning'], 'true'))
  - task: Docker@2
    displayName: Login to ACR
    inputs:
      command: login
      containerRegistry: '${{ parameters.docker_registry_connection }}'
  - task: Docker@2
    displayName: 'Pull $(docker_image_id)'
    inputs:
      command: pull
      arguments: '$(docker_image_id)'
  - powershell: |
      $f = "env.list"
      Set-Content $f "AZP_URL=$(System.TeamFoundationCollectionUri)" -Encoding UTF8
      Add-Content $f "AZP_TOKEN=$env:AZURE_DEVOPS_PAT" -Encoding UTF8
      Add-Content $f "AZP_POOL=Default" -Encoding UTF8
      Add-Content $f "AZP_AGENT_NAME=$(container_name)" -Encoding UTF8
    displayName: 'Write env.list'
  - task: Docker@2
    displayName: 'Run container $(container_name)'
    inputs:
      command: run
      arguments: '--name=$(container_name) --restart=always --env-file=env.list --detach $(docker_image_id)'
  # - task: DeleteFiles@1
  #   inputs:
  #     contents: 'env.list' 